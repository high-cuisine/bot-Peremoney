import { Injectable } from '@nestjs/common';
import { Ctx, Scene, SceneEnter, On, Command, Hears } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { AdminService } from 'src/modules/admin/admin.service';
import { ExelService } from 'src/modules/Exel-Module/exelModule.service';
import { BotMessages } from '../../messages/messages';
import { addCancelButton, handleCancelButton } from '../../helpers/scene.helper';

interface StartMailingSession {
  step: 'instructions' | 'message' | 'excel_file';
  message?: string;
}

@Injectable()
@Scene('start_mailing')
export class StartMailingScene {
  constructor(
    private readonly adminService: AdminService,
    private readonly exelService: ExelService
  ) {}

  @SceneEnter()
  async onSceneEnter(@Ctx() ctx: SceneContext) {
    if (!ctx.session['startMailing']) {
      ctx.session['startMailing'] = {} as StartMailingSession;
    }
    
    const session = ctx.session['startMailing'] as StartMailingSession;
    session.step = 'instructions';
    
    await ctx.replyWithHTML(`
üí¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏!<b>

–ü—Ä–∞–≤–∏–ª–∞:
1. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
2. Excel —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
3. –Æ–∑–µ—Ä–Ω–µ–π–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @

–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –±–æ—Ç —Ç–µ–∫—Å—Ç –í–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–≥–æ –æ–±—ä–µ–º–∞, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ –∑–Ω–∞–∫–∏ –∏ —ç–º–æ–¥–∑–∏, –∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤–∏–¥–µ–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –í —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–∏–∫ –≤ Telegram –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ï—Å–ª–∏ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @—Ö—Ö—Ö—Ö—Ö—Ö"


<b>–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:<b> 
    `);
    await addCancelButton(ctx);
  }

  @On('text')
  async onText(@Ctx() ctx: SceneContext) {
    if (!ctx.session['startMailing']) {
      ctx.session['startMailing'] = {} as StartMailingSession;
    }
    
    const session = ctx.session['startMailing'] as StartMailingSession;
    const text = (ctx.message as any).text;

    if (await handleCancelButton(ctx, text)) {
      return;
    }

    switch (session.step) {
      case 'instructions':
        session.message = text;
        session.step = 'excel_file';
        await ctx.reply(
          '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n' +
          '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
          Markup.inlineKeyboard([
            [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', 'cancel_mailing')]
          ])
        );
        break;
    }
  }

  @On('document')
  async onDocument(@Ctx() ctx: SceneContext) {
    const session = ctx.session['startMailing'] as StartMailingSession;
    
    if (session.step === 'excel_file') {
      const document = (ctx.message as any).document;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
      if (!document.file_name.endsWith('.xlsx') && !document.file_name.endsWith('.xls')) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)');
        return;
      }

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
      await ctx.reply('–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');

      const fileLink = await ctx.telegram.getFileLink(document.file_id);
      const response = await fetch(fileLink);
      const buffer = await response.arrayBuffer();

      const leadsData = await this.exelService.readExcel(Buffer.from(buffer), ctx.from.id);

      const userNames = leadsData.map(lead => lead.name);

      console.log(userNames, session.message, ctx.from.username);

      await this.adminService.sendAdminMailingOrder(userNames, session.message, ctx.from.username);
      await ctx.scene.leave();
    }
  }

  @On('callback_query')
  async onCallbackQuery(@Ctx() ctx: SceneContext) {
    const callbackData = (ctx.callbackQuery as any).data;

    if (callbackData === 'cancel_mailing') {
      await ctx.reply('–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.');
      await ctx.scene.leave();
    }
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤');
    await ctx.scene.leave();
  }
} 