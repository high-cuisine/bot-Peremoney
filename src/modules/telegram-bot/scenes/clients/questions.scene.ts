import { Injectable } from '@nestjs/common'
import { Action, Ctx, Scene, SceneEnter, On, Command, Hears } from 'nestjs-telegraf'
import { Markup } from 'telegraf'
import { SceneContext } from 'telegraf/typings/scenes'
import { BotMessages } from '../../messages/messages'
import { isNumber } from 'class-validator'
import { UsersService } from 'src/modules/users/users.service'
import { AdminService } from 'src/modules/admin/admin.service'
import { addCancelButton, handleCancelButton } from '../../helpers/scene.helper'

//import { BotMessage, getTelegramMessage } from 'src/util/bot_messages'

interface QuestionSession {
  step: 'niche' | 'conversion' | 'CAC' | 'LTV' | 'source'
  niche?: string
  conversion?: string
  CAC?: string
  LTV: string
  source: string
}

@Injectable()
@Scene('register')
export class RegisterScene {
  constructor(
    private readonly userService: UsersService,
    private readonly adminService: AdminService
  ) {}

  @SceneEnter()
  async registerEnter(@Ctx() ctx: SceneContext) {
    await ctx.replyWithHTML(
      BotMessages.survey.intro
    )
    await addCancelButton(ctx)
  }

  @On('text')
  async onMessage(@Ctx() ctx: SceneContext) {
    if (!ctx.scene || ctx.scene.current.id !== 'register') {
      return
    }

    const session = ctx.session['register'] as QuestionSession
    if (!session) {
      await ctx.scene.leave()
      return
    }

    const text = ctx.message['text']

    if (await handleCancelButton(ctx, text)) {
      return
    }

    if(text === '-') {
      switch (session.step) {
        case 'niche':
          session.niche = '-'
          session.step = 'conversion'
          await ctx.replyWithHTML('‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –Ω–∏—à–µ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ä–µ–¥–Ω—é—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é:')
          break
        case 'conversion':
          session.conversion = '-'
          session.step = 'CAC'
          await ctx.replyWithHTML('‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ê–°:')
          break
        case 'CAC':
          session.CAC = '-'
          session.step = 'LTV'
          await ctx.replyWithHTML('‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –°–ê–°. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à LTV:')
          break
        case 'LTV':
          session.LTV = '-'
          await ctx.replyWithHTML(
            `üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
            ` –ù–∏—à–∞: <b>${session.niche}</b>\n` +
            ` –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>${session.conversion}</b>\n` +
            ` –°–ê–°: <b>${session.CAC}</b>\n\n` +
            ` –°–ê–°: <b>${session.LTV}</b>\n\n` +
            `–í—Å–µ –≤–µ—Ä–Ω–æ?`,
            Markup.inlineKeyboard([
              [
                Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_registration'),
                Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'restart_registration')
              ]
            ])
          )
          break
      }
      return
    }

    switch (session.step) {
      case 'niche':
        if (text.length < 2 || text === '-') {
          await ctx.replyWithHTML('‚ùå –ù–∏—à–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
          return
        }
        session.niche = text
        session.step = 'conversion'
        await ctx.replyWithHTML('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ä–µ–¥–Ω—é—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é:')
        break

      case 'CAC':
        if (isNumber(text.length) || text === '-') {
            await ctx.replyWithHTML('‚ùå –ö–æ–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
            return
        }
        session.conversion = text
        session.step = 'LTV'
        await ctx.replyWithHTML('‚úÖ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à LTV:')
        break

        case 'conversion':
            if (isNumber(text.length)) {
                await ctx.replyWithHTML('‚ùå –ö–æ–Ω–≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:')
                return
            }
            session.conversion = text
            session.step = 'CAC'
            await ctx.replyWithHTML('‚úÖ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ê–°:')
            break

      case 'LTV':
        session.LTV = text

        await ctx.replyWithHTML(
          `üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n` +
          ` –ù–∏—à–∞: <b>${session.niche}</b>\n` +
          ` –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>${session.conversion}</b>\n` +
          ` –°–ê–°: <b>${session.CAC}</b>\n\n` +
          ` –°–ê–°: <b>${session.LTV}</b>\n\n` +
          `–í—Å–µ –≤–µ—Ä–Ω–æ?`,
          Markup.inlineKeyboard([
            [
              Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm_registration'),
              Markup.button.callback('üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'restart_registration')
            ]
          ])
        )
        break
    }
  }

  

  @Action('restart_registration')
  async onRestart(@Ctx() ctx: SceneContext) {
    if (!ctx.scene || ctx.scene.current.id !== 'register') {
      return
    }

    // –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    ctx.session['register'] = {
      step: 'name'
    }

    await ctx.answerCbQuery()
    await ctx.scene.reenter()
  }

  @Action('confirm_registration')
  async onConfirm(@Ctx() ctx: SceneContext) {
    if (!ctx.scene || ctx.scene.current.id !== 'register') {
      return
    }
    const session = ctx.session['register'] as QuestionSession
    
    if (!session) {
      await ctx.scene.leave()
      return
    }

    await this.userService.createUserInfoDates(
      ctx.from.id, 
      true, 
      session.niche, 
      session.conversion, 
      session.source, 
      Number(session.CAC), 
      Number(session.LTV)
    )

    await this.adminService.sendAdminMessage(`
      <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É</b>
      <b>–ù–∏—à–∞:</b> ${session.niche}
      <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b> ${session.conversion}
      <b>–°–ê–°:</b> ${session.CAC}
      <b>LTV:</b> ${session.LTV}
      <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${session.source}
    `)

    await ctx.replyWithHTML('‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!')
    await ctx.scene.leave()

  }

  @Action('cancel')
  async onCancel(@Ctx() ctx: SceneContext) {
    if (!ctx.scene || ctx.scene.current.id !== 'register') {
      return
    }

    await ctx.replyWithHTML('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await ctx.scene.leave()
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤');
    await ctx.scene.leave();
  }
}
