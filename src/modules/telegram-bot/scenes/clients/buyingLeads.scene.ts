import { Injectable } from '@nestjs/common'
import { Action, Ctx, Scene, SceneEnter, On, Command, Hears } from 'nestjs-telegraf'
import { AdminService } from 'src/modules/admin/admin.service'
import { UsersService } from 'src/modules/users/users.service'
import { Markup } from 'telegraf'
import { SceneContext } from 'telegraf/typings/scenes'
import { BotMessages } from '../../messages/messages'
import { addCancelButton, handleCancelButton } from '../../helpers/scene.helper'

interface BuyingLeadsSession {
  step: 'quantity' | 'payment'
  quantity?: number
}

@Injectable()
@Scene('buying_leads')
export class BuyingLeadsScene {
  constructor(
    private adminService: AdminService,
    private userService: UsersService
  ) {}

  @SceneEnter()
  async buyingLeadsEnter(@Ctx() ctx: SceneContext) {
    await ctx.replyWithHTML(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–∫—É–ø–∫–∏ –ª–∏–¥–æ–≤!\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤:'
    )
    await addCancelButton(ctx)
  }

  @On('text')
  async onMessage(@Ctx() ctx: SceneContext) {
    const text = (ctx.message as any).text
    
    if (await handleCancelButton(ctx, text)) {
      return
    }

    if (!ctx.scene || ctx.scene.current.id !== 'buying_leads') {
      return
    }

    const session = ctx.session['buying_leads'] as BuyingLeadsSession
    if (!session) {
      await ctx.scene.leave()
      return
    }

    switch (session.step) {
      case 'quantity':
        const quantity = parseInt(text)
        if (isNaN(quantity) || quantity <= 0) {
          await ctx.replyWithHTML('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ª–∏–¥–æ–≤:')
          return
        }
        session.quantity = quantity
        session.step = 'payment'
        
        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const price = quantity * 70 // –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞: 100 —Ä—É–±–ª–µ–π –∑–∞ –ª–∏–¥
        
        await ctx.replyWithHTML(
          `üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n\n` +
          `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤: <b>${quantity}</b>\n` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${price} —Ä—É–±.</b>\n\n` +
          `–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ?`,
          Markup.inlineKeyboard([
            [
              { text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: `top_up_balance:${price}` },
              { text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'cancel_purchase' },
            ]
          ])
        )
        break
    }
  }

  @Action('process_payment')
  async onPayment(@Ctx() ctx: SceneContext) {
    if (!ctx.scene || ctx.scene.current.id !== 'buying_leads') {
      return
    }

    const session = ctx.session['buying_leads'] as BuyingLeadsSession
    if (!session || !session.quantity) {
      await ctx.scene.leave()
      return
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    const paymentLink = 'https://example.com/payment' // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

    const user = await this.userService.getUserByName(ctx.from.username);

    if(!user) {
        await ctx.scene.leave()
        return;
    }

    await this.adminService.notificationReplenishment({
        ...user,
        telegramId: Number(user.telegramId)
    }, session.quantity);

    await ctx.answerCbQuery()
    await ctx.replyWithHTML(
      `üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n` +
      `<a href="${paymentLink}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>\n\n` +
      `–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`
    )
    await ctx.scene.leave()
  }

  @Action('cancel_purchase')
  async onCancel(@Ctx() ctx: SceneContext) {
      if (!ctx.scene || ctx.scene.current.id !== 'buying_leads') {
      return
    }

    await ctx.answerCbQuery()
    await ctx.replyWithHTML('‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    await ctx.scene.leave()
  }

  @Command('exit')
  async onExit(@Ctx() ctx: SceneContext) {
    await ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∫—É–ø–∫–∏ –ª–∏–¥–æ–≤');
    await ctx.scene.leave();
  }
}
