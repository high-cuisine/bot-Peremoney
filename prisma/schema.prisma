generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  telegramId        BigInt    @unique
  username          String    @unique
  name              String    @default("")
  phone             String    @default("")
  role              UserRoles @default(user)
  rate              UserRate  @default(default)
  lastAction        DateTime  @default(now())
  firstAction       DateTime  @default(now())
  leads             Int       @default(0)
  isTakingFreeLeads Boolean   @default(false)
  isBanned          Boolean   @default(false)

  clients        UsersClients[]
  estimation     UsersEstimation[]
  questions      UsersQuestion[]
  competitors    Competitors[]
  leadGeneration LeadGeneration[]
  payments       Payments[]
  userSales      UserSales?
  userCRM        UserCRM?
  inviting       Inviting?
  usersCallOrder UsersCallOrder[]

  @@index([telegramId])
  @@map("users")
}

model UsersQuestion {
  id             Int     @id @default(autoincrement())
  userId         Int
  isTakingBonus  Boolean @default(false)
  whatsABusiness String
  conversion     String
  about          String
  CAC            Float
  LTV            Float
  user           User    @relation(fields: [userId], references: [id])

  @@map("users_questions")
}

model UsersEstimation {
  id         Int  @id @default(autoincrement())
  userId     Int
  estimation Int
  user       User @relation(fields: [userId], references: [id])

  @@map("users_estimation")
}

model LeadGeneration {
  id           Int    @id @default(autoincrement())
  competitorId Int
  userId       Int
  maxCount     Int
  dailyCount   Int
  projectName  String @default("")
  companyNameForCalling String?

  user       User        @relation(fields: [userId], references: [id])
  competitor Competitors @relation(fields: [competitorId], references: [id])

  @@map("lead_generation")
}

model UsersClients {
  id         Int    @id @default(autoincrement())
  userId     Int
  name       String
  phone      String
  email      String
  telegramId BigInt
  user       User   @relation(fields: [userId], references: [id])

  @@map("users_clients")
}

model Competitors {
  id      Int    @id @default(autoincrement())
  userId  Int
  webSite String
  phone   String

  leadGeneration LeadGeneration[]

  user User @relation(fields: [userId], references: [id])

  @@map("competitors")
}

model UsersCallOrder {
  id     Int            @id @default(autoincrement())
  userId Int
  companyName String    @default("")

  user User @relation(fields: [userId], references: [id])

  @@map("users_call_order")
}

model Payments {
  id     Int            @id @default(autoincrement())
  userId Int
  amount Int
  Hash   String
  status PaymentsStatus @default(pending)
  type   PaymentType    @default(replenishment)

  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model UserSales {
  id     Int @id @default(autoincrement())
  userId Int @unique // Добавлено @unique для one-to-one отношения
  amount Int

  user User @relation(fields: [userId], references: [id])

  @@map("user_sales")
}

model UserCRM {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  apiKey  String
  crmType CRMType

  user User? @relation(fields: [userId], references: [id])

  @@map("user_crm")
}

model UserBots {
  id          Int     @id @default(autoincrement())
  username    String
  session     String
  phone       String?
  password    String?

  inviting    Inviting[]
}

model Inviting {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  botId       Int
  groupName   String

  user User? @relation(fields: [userId], references: [id])
  userbots UserBots? @relation(fields: [botId], references: [id])
}

enum UserRoles {
  admin
  moderator
  user
}

enum UserRate {
  default
  pro
}

enum PaymentsStatus {
  pending
  error
  success
}

enum CRMType {
  amo
  bitrix
}

enum PaymentType {
  replenishment
  pro
  premium
}